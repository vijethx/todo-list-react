{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","trim","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterList","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","newTask","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dcb3e29.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState('');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!name.trim()) {\r\n      return;\r\n    }\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!newName.trim()) {\r\n      return;\r\n    }\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}","import React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\n\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new obkect\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}